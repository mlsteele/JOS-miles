# Question 1
What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

One reason is so that the number indicating which exception occurred could be passed to the generic trap function. Another reason is so that some of them could behave differently, for example with regards to noec. It's necessary to have these be different pieces of code because when the processor jumps to some handler using the idt you can't tell where it came from except for where you arrive. It might be possible to shorten the macro a bit so that the repetitiveness is not as costly in terms of program space, but it's not really that big to begin with.

# Question 2
Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?

A page fault is something that the user should not be able to trigger directly. So we restrict the user from triggering any of these processor managed interrupts by setting the Descriptor Privelage Level to 0, allowing only the kernel these interrupts.

# Question 3
Descriptor Privilege Level is one of the arguments to the SETGATE macro we use to build the IDT. It determines which rings are allowed to trigger the interrupt. If we leave this at 0 for T_BRKPT then the breakpoint user program will have it's T_BRKPT interrupt transformed into a general protection fault. We want to allow user programs to trigger a T_BRKPT that the kernel can use to drop into a monitor and debug. In order to do this, we have to initialize the IDT with a 3 (app ring) in the dpl slot for T_BRKPT.

# Question 4
The point of the DPL and General Protection Fault interface is to disallow user programs for simulating interrupts that should not be allowed. Some interrupts should be reserved for the kernel or hardware to fire. The example in softint is interrupt 14, the page fault interrupt. If a user program were able to trigger this, it could mess with it's page table in ways that it should not be able to.
