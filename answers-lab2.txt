# Question 1
It should be a virtual address (uintptr_t).
Because value, fetched from return_a_pointer, returns a C pointer represented with a virtual address.

uintptr_t x; // Declare a virtual address.
char* value = return_a_pointer(); // Get a pointer (programs operate in virtual memory).
*value = 10; // Set value of the byte pointed to by the virtual pointer value to 0b1010.
x = (mystery_t) value; // Set x to the number that is a virtual address.

# Question 2
from info pg
VPN range     Entry         Flags        Physical page
[ef000-ef3ff]  PDE[3bc]     -------UWP
  [ef000-ef020]  PTE[000-020] -------U-P 0011b-0013b
[ef400-ef7ff]  PDE[3bd]     -------U-P
  [ef7bc-ef7bc]  PTE[3bc]     -------UWP 003fd
  [ef7bd-ef7bd]  PTE[3bd]     -------U-P 0011a
  [ef7bf-ef7bf]  PTE[3bf]     -------UWP 003ff
  [ef7c0-ef7d0]  PTE[3c0-3d0] ----A--UWP 003fe 003fc 003fb 003fa 003f9 003f8 ..
  [ef7d1-ef7ff]  PTE[3d1-3ff] -------UWP 003ec 003eb 003ea 003e9 003e8 003e7 ..
[efc00-effff]  PDE[3bf]     -------UWP
  [efff8-effff]  PTE[3f8-3ff] --------WP 0010f-00116
[f0000-f03ff]  PDE[3c0]     ----A--UWP
  [f0000-f0000]  PTE[000]     --------WP 00000
  [f0001-f009f]  PTE[001-09f] ---DA---WP 00001-0009f
  [f00a0-f00b7]  PTE[0a0-0b7] --------WP 000a0-000b7
  [f00b8-f00b8]  PTE[0b8]     ---DA---WP 000b8
  [f00b9-f00ff]  PTE[0b9-0ff] --------WP 000b9-000ff
  [f0100-f0105]  PTE[100-105] ----A---WP 00100-00105
  [f0106-f0115]  PTE[106-115] --------WP 00106-00115
  [f0116-f0116]  PTE[116]     ---DA---WP 00116
  [f0117-f0118]  PTE[117-118] --------WP 00117-00118
  [f0119-f011a]  PTE[119-11a] ---DA---WP 00119-0011a
  [f011b-f011b]  PTE[11b]     ----A---WP 0011b
  [f011c-f011c]  PTE[11c]     ---DA---WP 0011c
  [f011d-f013b]  PTE[11d-13b] ----A---WP 0011d-0013b
  [f013c-f03bd]  PTE[13c-3bd] ---DA---WP 0013c-003bd
  [f03be-f03ff]  PTE[3be-3ff] --------WP 003be-003ff
[f0400-f3fff]  PDE[3c1-3cf] ----A--UWP
  [f0400-f3fff]  PTE[000-3ff] ---DA---WP 00400-03fff
[f4000-f43ff]  PDE[3d0]     ----A--UWP
  [f4000-f40fe]  PTE[000-0fe] ---DA---WP 04000-040fe
  [f40ff-f43ff]  PTE[0ff-3ff] --------WP 040ff-043ff
[f4400-fffff]  PDE[3d1-3ff] -------UWP
  [f4400-fffff]  PTE[000-3ff] --------WP 04400-0ffff

# Question 3
We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernel's memory? What specific mechanisms protect the kernel memory?

We have placed the kernel in a low PHYSICAL address and the user process in a similar VIRTUAL address. But we are not using an identity mapping between virtual and physical addresses. Instead, we map the virtual addresses of the user space to some otherwise unused physical pages (or don't map it at first and do this later). That way, the user process accessing low virtual memory will not be able to access the kernel's physical memory at all.

But we do map the kernel memory into the same memory environment (page directory + page table system) that the user process executes on. But in the mapping, we do not set the PTE_U bit of the critical high virtual addresses. That way, if an instruction in user mode tries to use memory that is only meant for the kernel, the mmu will raise a protection fault and the kernel will be able to dispense with the unruly user process.

# Question 4
What is the maximum amount of physical memory that this operating system can support? Why?

This operating system has 32 bit virtual addresses. The mmu supports addressing 32 bit physical addresses. Therefore the entire system can support only 2^32 bytes or about 4.3 GB.

# Question 5
How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?

Let's break down the memory overhead of managing memory:

First of all, there's the space that the code for how to manage memory takes up. Let's ignore that, it's pretty small and confusing to calculate.

To keep track of which physical pages are free we kept a linked list of PageInfo structs. Each struct is 8 bytes, and there are 1048576 (maximum number of) pages. So that's 8388608 bytes or about 8.4 MB of overhead to keep track of pages.

To map the whole address range completely, we would need one page directory and 1024 page tables. The page directory contains 1024 4 byte entries pointing to page tables. Each of the 1024 page tables contains 1024 entries, each pointing to a 4096 byte physical page. So the overhead of all this is 4096+1024*4096=4198400 or about 4.2 MB. This maps about 4.3 GB, which is the maximum addressable memory.

So in total that's about 12.6 MB of overhead to manage the maximum amount of physical. This is assuming one process and that it requires a mapping for all of physical memory. Most processes will probably map less pages, and multiple processes may require multiple page directories.

# Question 6
Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?

We transition to above KERNBASE at the jump to $relocated
	mov	$relocated, %eax
	jmp	*%eax

It's not a problem that the eip is still low because the entrypgdir mapping maps both low and high virtual addresses to low physical addresses. And also none of the code before the jumps cares where it is executed in memory.
The transition is necessary so that later kernel code which depends on the high VMA can execute properly and also so that we can later remap low virtual memory to other physical pages for user processes to use.

# Challenge Problem
I implemented monitor three monitor utilities. They do useful things and print out help messages when used incorrectly.
- showmappings (aliased also to sm) displays page mappings for a range of virtual addresses.
- pgmod allows you to set the user and write permission bits of page mappings
- memxv examines memory at virtual addresses
- memxp examines memory at physical addresses
